environment:
    matrix:
    - arch: x86_64
      bits: 64
    - arch: i686
      bits: 32

install:
  - ps: |
      [Environment]::SetEnvironmentVariable("MSYS2_PATH_TYPE", "inherit", "Machine")
      $arch = $env:Arch
      $bits = $env:Bits
      $msys = "msys$bits"
      $mingw = "mingw$bits"
      $mingwUpper = $mingw.ToUpper()
      $buildFolder = $env:APPVEYOR_BUILD_FOLDER
      $tag = $env:APPVEYOR_REPO_TAG_NAME
      $posixBuildFolder = $buildFolder -Replace '\\', '/'
      $env:PATH="C:\$msys\$mingw\bin;C:\$msys\usr\bin;$env:PATH"
      $artifact = "schismtracker-$tag-win$bits.zip"

      function bash($command, $dieOnError = $true) {
        ""
        Write-Host $command

        & "C:\$msys\usr\bin\sh.exe" --login -c "MSYSTEM=$mingwUpper . /etc/profile && cd $posixBuildFolder && $command"

        if ($LASTEXITCODE -eq 0) {
          Write-Host "'$command' succeeded. While its output might be red, it exited with '0'." -ForegroundColor Green
        } else {
          Write-Host "'$command' failed with exit code $LASTEXITCODE! " -ForegroundColor Red -NoNewline

          if ($dieOnError) {
            Write-Host "Exiting." -ForegroundColor Red
            exit $LASTEXITCODE
          } else {
            "Continuing."
          }
        }
      }

      # 32-bit MSYS2 is not offered on AppVeyor yet, so we need to install it.
      if ($arch -eq "i686") {
        Write-Host "Installing 32-bit MSYS2..." -ForegroundColor Cyan

        # download installer
        $zipPath = "$($env:USERPROFILE)\msys2-i686-latest.tar.xz"
        $tarPath = "$($env:USERPROFILE)\msys2-i686-latest.tar"

        "Downloading MSYS2 installation package..."
        (New-Object Net.WebClient).DownloadFile('http://repo.msys2.org/distrib/msys2-i686-latest.tar.xz', $zipPath)

        Write-Host "Unzipping $zipPath..."
        7z x $zipPath -y -o"$env:USERPROFILE" | Out-Null

        Write-Host "Untaring $tarPath to C:\msys32\..."
        7z x $tarPath -y -oC:\ | Out-Null
        del $zipPath
        del $tarPath

        Write-Host "32-bit MSYS2 installed" -ForegroundColor Green

        bash "pacman --sync --noconfirm --needed pacman pacman-mirrors"
        bash "pacman --sync --noconfirm --needed VCS"
        bash "pacman --sync --noconfirm --needed base-devel"
        bash "pacman --sync --noconfirm --needed msys2-devel"
        bash "pacman --sync --noconfirm --needed mingw-w64-$arch-toolchain"
      }

      bash "pacman --sync --noconfirm --needed mingw-w64-$arch-SDL"

build_script:
  - ps: |
      bash "autoreconf --install --include=/$mingw/share/aclocal/"
      bash "./configure"
      bash "make"
      xcopy C:\$msys\$mingw\bin\SDL.dll .\

      if ($arch -eq "i686") {
        xcopy C:\$msys\$mingw\bin\libgcc_s_dw2-1.dll .\
        xcopy C:\$msys\$mingw\bin\libwinpthread-1.dll .\
      }

test_script:
  - ps: |
      $exe = "$buildFolder\schismtracker.exe"

      if (Test-Path $exe) {
        Write-Host "'$exe' exists. Continuing." -ForegroundColor Green
      } else {
        Write-Host "'$exe' does not exist. Exiting." -ForegroundColor Red
        exit 1
      }

      Start-Process -Wait -FilePath $exe -ArgumentList '--version'
      $result = Get-Content "stdout.txt"

      if ($result -Match 'Schism Tracker') {
        Write-Host "'$exe --version' output 'Schism Tracker'. Success!" -ForegroundColor Green
      } elseif ([string]::IsNullOrWhiteSpace($result)) {
        Write-Host "'$exe --version' did not output anything. It might be damaged." -ForegroundColor Red
        exit 1
      } else {
        Write-Host "'$exe --version' did not output 'Schism Tracker' as expected. The result was:" -ForegroundColor Red
        Write-Host $result -ForegroundColor Red
        exit 1
      }

before_deploy:
  - ps: |
      if (Test-Path "schismtracker.exe") { 7z a -tzip "$artifact" "schismtracker.exe" }
      if (Test-Path "SDL.dll") { 7z a -tzip "$artifact" "SDL.dll" }
      if (Test-Path "libgcc_s_dw2-1.dll") { 7z a -tzip "$artifact" "libgcc_s_dw2-1.dll" }
      if (Test-Path "libwinpthread-1.dll") { 7z a -tzip "$artifact" "libwinpthread-1.dll" }
      if (Test-Path $artifact) { appveyor PushArtifact "$artifact" }

on_failure:
  - dir /s /b > dir.txt
  - if exist "stdout.txt" 7z a -tzip schismtracker_debug_logs.zip "stdout.txt" > nul
  - if exist "stderr.txt" 7z a -tzip schismtracker_debug_logs.zip "stderr.txt" > nul
  - if exist "dir.txt" 7z a -tzip schismtracker_debug_logs.zip "dir.txt" > nul
  - if exist "config.log" 7z a -tzip schismtracker_debug_logs.zip "config.log" > nul
  - if exist "configure.ac" 7z a -tzip schismtracker_debug_logs.zip "configure.ac" > nul
  - if exist "configure" 7z a -tzip schismtracker_debug_logs.zip "configure" > nul
  - if exist "C:\msys%bits%\mingw%bits%\bin\sdl-config" 7z a -tzip schismtracker_debug_logs.zip "C:\msys%bits%\mingw%bits%\bin\sdl-config" > nul

on_finish:
  - ps: if (Test-Path "schismtracker_debug_logs.zip") { appveyor PushArtifact "schismtracker_debug_logs.zip" }

artifacts:
  - path: '*.zip'

notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: true

deploy:
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: $(APPVEYOR_REPO_COMMIT_MESSAGE)
  provider: GitHub
  auth_token:
    secure: 3Yck1BxvSwZXduwRGW7QO7jm8D5ozdZwHlqTkCOFdfdWgKIQZXcVAmc/3gmwQ1vs
  artifact: /.*\.zip/
  draft: false
  prerelease: false
  on:
    branch: master
    appveyor_repo_tag: true
